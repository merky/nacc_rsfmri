#!/bin/bash
# author: mhollen@nmr.mgh.harvard.edu

set -e

# user settings
SKIP=4        # drop first N frames
FWHMS="0 4 6" # full-width half max, in mm
BPSS_LO=0.009 # frequency, low
BPSS_HI=0.08  # frequency, high
TR=5.0        # TR will be determined based on file
SLICE_ORDER=odd # odd/up/down
ORIENT=RPI    # to match template
PROCESS_DIR=restproc

# not enough args
if [[ $# -lt 3 ]]; then
    echo "usage: $(basename $0) subject_dir anat.nii rest1.nii [rest2.nii...]"
    exit 0;
fi

# inputs
SUBJECT_DIR=$1
shift
ANAT=$1
shift
BOLDS=($@)
BOLDN=$#

#################################
# settings
#################################

# used for debugging
RUN_ANAT_INIT=true
RUN_FUNC_INIT=true
RUN_REG=true
RUN_WARP_REG=true # default usually false

# script directory
script_dir=$(echo $(cd $(dirname $(readlink -f $0)); pwd) )
templates_dir=$script_dir/templates

# standard space
STANDARD=$templates_dir/MNI152_T1_2mm
STANDARD_BRAIN=$templates_dir/MNI152_T1_2mm_brain
STANDARD_MASK=$templates_dir/MNI152_T1_2mm_brain_mask.nii.gz
STANDARD_MASK_DIL=$templates_dir/MNI152_T1_2mm_brain_mask_dil.nii.gz

# masks for extracting nuisance signals
MASK_VENTRICLES=$templates_dir/avg152T1_ventricles_MNI.nii.gz
MASK_WM=$templates_dir/avg152T1_WM_MNI.nii.gz
#MASK_WHOLEBRAIN=$STANDARD_MASK
MASK_WHOLEBRAIN=$templates_dir/avg152T1_brain_MNI.nii.gz

# config
FLIRT_CONF=$FSL_DIR/etc/flirtsch/sch3Dtrans_3dof
FNIRT_CONF=$FSLDIR/etc/flirtsch/T1_2_MNI152_2mm.cnf

# num threads for ANTs
export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=8

# output dir
d=$(readlink -f $SUBJECT_DIR)/$PROCESS_DIR


#################################
# Summary
#################################

# show user current settings
echo " * There are $BOLDN BOLD runs to be processed..."
echo " * Input BOLD files: ${BOLDS[@]}"
echo ""
echo " * SKIP        : $SKIP frames"
echo " * FWHM(S)     : $FWHMS (in mm)"
echo " * BANDPASS LO : $BPSS_LO Hz"
echo " * BANDPASS HI : $BPSS_HI Hz"
echo " * OUTPUT DIR  : $d"
echo ""

#################################
# Initial Setup
#################################

# create output dirs
echo " * Creating directories..."
mkdir -p $d/{reg,nuisance,seg}

# detect TR from file (in msec)
get_tr () {
    tr=$(mri_info            $1 |
                        grep TR |
          awk '{print $2;exit}' |
                   cut -d. -f1  )

    # can't modify 0
    [[ $tr -eq 0 ]] && echo 0;

    # otherwise, return tr in seconds
    echo $(echo "scale=2;$tr/1000" | bc)
}

#################################
# Anatomy
#################################

# initialize anatomy volume 
run_anat_init () {
    local tmpfile=`mktemp --suffix=.nii.gz`
    scp $ANAT $tmpfile
    # deoblique
    3drefit -deoblique $tmpfile

    # copy data
    echo " * Copying anatomical data (reorienting to LAS)..."
    3dresample -orient $ORIENT -inset $tmpfile -prefix $d/anat.nii.gz

    #skull strip anat
    echo " * Skull stripping anat"
    bet $d/anat $d/anat_brain -R -g -.4 -f .35
}

# register anatomy to standard
run_anat_reg () {
    local standard=$(mktemp --suffix .nii.gz)

    # make copy of template volume (ANTs requires)
    cp $STANDARD_BRAIN.nii.gz $standard

    # normalize anat -> template
    echo " * Normalizing anat -> standard"

    ANTS 3 \
        -m PR[$standard,$d/anat_brain.nii.gz,1,4] \
        -t SyN[0.25] \
        -r Gauss[3,0] \
        -o $d/anat_brain_atl_ \
        -i 30x90x20 \
        --use-Histogram-Matching \
        --number-of-affine-iterations 10000x10000x10000x10000x10000 \
        --MI-option 32x16000

    # non-linear
    WarpImageMultiTransform 3 \
        $d/anat_brain.nii.gz \
        $d/anat_brain_atl_warp.nii.gz \
        $d/anat_brain_atl_Warp.nii.gz \
        $d/anat_brain_atl_Affine.txt \
        -R $standard

    # affine
    WarpImageMultiTransform 3 \
        $d/anat_brain.nii.gz \
        $d/anat_brain_atl_affine.nii.gz \
        $d/anat_brain_atl_Affine.txt \
        -R $standard

}


#################################
# Functional
#################################

#############################################
# copy data, reorient, slice time correction
#############################################
#  input: <filebase> <input>
# output: <filebase>_reorient_skip_tc
#############################################
run_func_init () {
    local inputvol=$1
    local fpath=$2

    # functional inputs
    echo " * Copying functional image to dir"
    scp $inputvol ${fpath}.nii.gz

    # get TR
    TR=$(get_tr $fpath.nii.gz)

    if [[ "$TR" == "0" ]]; then
        echo "TR=$TR"
        echo "Error: TR could not be determined from nifti input"
        exit
    fi

    # deoblique
    3drefit -deoblique ${fpath}.nii.gz

    # reorient
    echo " * Reorienting to $ORIENT"
    3dresample -orient $ORIENT \
                -inset ${fpath}.nii.gz \
               -prefix ${fpath}_reorient.nii.gz

    # remove first N frames
    echo " * Removing first $SKIP frames from functional"
    numvols=`echo "$(fslnvols ${fpath}_reorient) - $SKIP" | bc`
    fslroi ${fpath}_reorient ${fpath}_reorient_skip $SKIP $numvols

    # slice time correction? (need to find scan timing)
    echo " * Performing slice time correction"
    slicetimer -i ${fpath}_reorient_skip \
               -o ${fpath}_reorient_skip_tc \
               -r $TR \
               --$SLICE_ORDER
}


#############################################
# motion correction
#############################################
#  input: <filebase> NAME
# output: <filebase>_mc
#############################################
run_func_motion () {
    local fpath=$1
    local fbase=$2

    echo " * $fbase: Motion correction"
    mcflirt -in $fpath \
            -out ${fpath}_mc \
            -plots \
            -report

    # plot motion
    echo " * $fbase: Plotting motion parameters"

    # rotations
    fsl_tsplot -i ${fpath}_mc.par \
               -t 'MCFLIRT estimated rotations (radians)' \
               -u 1 --start=1 --finish=3 \
               -a x,y,z -w 640 -h 144 \
               -o ${fpath}_mc_rot.png

    # translations
    fsl_tsplot -i ${fpath}_mc.par \
               -t 'MCFLIRT estimated translations (mm)' \
               -u 1 --start=4 --finish=6 \
               -a x,y,z -w 640 -h 144 \
               -o ${fpath}_mc_trans.png

    # save motion regressors as separate files 
    for x in $(seq 1 6); do
        # parse and output motion values
        cat ${fpath}_mc.par |
        awk '{print $'${x}'}' > $d/nuisance/${fbase}.regressor.motion${x}.txt

        # calculate motion derivatives (backwards diff)
        1d_tool.py -infile $d/nuisance/${fbase}.regressor.motion${x}.txt \
                   -backward_diff \
                   -write $d/nuisance/${fbase}.regressor.motion${x}.deriv.txt

    if [[ "$RUN_WARP_REG" == true ]]; then
        cp $d/nuisance/${fbase}.regressor.motion${x}.deriv.txt \
           $d/nuisance/${fbase}.warp.regressor.motion${x}.deriv.txt

        cp $d/nuisance/${fbase}.regressor.motion${x}.txt \
           $d/nuisance/${fbase}.warp.regressor.motion${x}.txt
    fi
    done

}


#############################################
# registration/normalization
#############################################
#  input: <filebase>
# output: <filebase>[_brain]_atl_affine
#############################################
run_func_reg_and_normalize () {
    local fpath=$1

    fixed=$d/anat_brain.nii.gz
    moving=${fpath}_mean_brain.nii.gz
    output=${fpath}_mean_brain_2anat_

    # coregister func -> anat (using ANTs)
    echo " * coregistration "

    ANTS 3 \
        -m PR[$fixed,$moving,1,4] \
        -t SyN[0.25] \
        -r Gauss[3,0] \
        -o $output \
        -i 30x90x20 \
        --use-Histogram-Matching \
        --number-of-affine-iterations 10000x10000x10000x10000x10000 \
        --MI-option 32x16000

    # transform mean functional
    WarpImageMultiTransform 3 \
         $moving \
         ${output}affine.nii.gz \
         ${output}Affine.txt \
         -R ${fixed}

    if [[ "$RUN_WARP_REG" == true ]]; then
        echo " * normalizing 4d func -> standard (non-linear warping)"
        echo " * using SPM ..."
        spm_normalize ${fpath}_brain.nii.gz \
                      ${fpath}_brain_atl_warp.nii.gz
    fi
}


#############################################
# skullstrip (and functional mean)
#############################################
#  input: <filebase> NAME
# output: <filebase>_brain
#############################################
run_func_skullstrip() {
    local fpath=$1
    local fbase=$2

    # create mean of functional
    fslmaths        ${fpath} \
             -Tmean ${fpath}_mean

    echo " * $fbase: Skull stripping mean image"
    # skull strip it
    bet      ${fpath}_mean \
             ${fpath}_mean_brain \
             -R -f 0.3 -m

    echo " * $fbase: Apply skull strip mask to 4d functional"
    # apply skull strip to 4d functional
    fslmaths      ${fpath} \
             -mas ${fpath}_mean_brain_mask \
                  ${fpath}_brain

    echo " * $fbase: Use 2nd/98th percentiles of 4d image to improve brain mask"

    # determine threshold
    p2=$(  fslstats ${fpath}_brain -p 2)
    p98=$( fslstats ${fpath}_brain -p 98)
    thr=$( echo "scale=5; $p2 + ($p98 -$p2)/10" | bc)

    # create mask below threshold
    fslmaths       ${fpath}_brain \
             -thr  $thr \
             -Tmin \
             -bin  ${fpath}_brain_percmask \
             -odt  char

    # dilate mask (redue likelihood of removing brain voxels)
    fslmaths       ${fpath}_brain_percmask \
             -dilF ${fpath}_brain_percmask_dil

    echo " * $fbase: Applying improved brain mask to 4d image"
    # apply dilated mask to 4d image
    fslmaths      ${fpath} \
             -mas ${fpath}_brain_percmask_dil \
                  ${fpath}_brain

}

# scale signal by factor of 1000
run_func_scaling () {
    local fpath=$1
    # grand mean scaling
    fslmaths      ${fpath} \
             -ing 1000 \
                  ${fpath}_gms \
             -odt float
}

# extract mean signal from ventricles, white matter, and whole brain
run_func_extract_regressors () {
    # note: motion regressors were extracted durin motion correction
    local fpath=$1
    local fbase=$2

    # extract mean wm time series
    echo " * $fbase: Extracting mean white-matter time course signal"
    fslmeants -i ${fpath}.nii.gz \
              -m $MASK_WM \
              -o $d/nuisance/${fbase}.regressor.wm.txt

    # extract mean whole brain time series
    echo " * $fbase: Extracting mean whole-brain time course signal"
    fslmeants -i ${fpath}.nii.gz \
              -m $MASK_WHOLEBRAIN \
              -o $d/nuisance/${fbase}.regressor.wholebrain.txt

    # extract mean ventricle time series
    echo " * $fbase: Extracting mean ventricles time course signal"
    fslmeants -i ${fpath}.nii.gz \
              -m $MASK_VENTRICLES \
              -o $d/nuisance/${fbase}.regressor.ventricles.txt

    # calculate mean signal derivatives (backwards diff)
    echo " * $fbase: Computing derivatives of extracted values"
    1d_tool.py -infile $d/nuisance/${fbase}.regressor.ventricles.txt \
               -backward_diff \
               -write $d/nuisance/${fbase}.regressor.ventricles.deriv.txt

    1d_tool.py -infile $d/nuisance/${fbase}.regressor.wholebrain.txt \
               -backward_diff \
               -write $d/nuisance/${fbase}.regressor.wholebrain.deriv.txt

    1d_tool.py -infile $d/nuisance/${fbase}.regressor.wm.txt \
               -backward_diff \
               -write $d/nuisance/${fbase}.regressor.wm.deriv.txt

}


#############################################
# smoothing, bandpass + nuissance regression
#############################################
#  input: <filebase> NAME
# output: <filebase>_fwhm#_bpss_resid
run_fcpreproc () {
    local fpath=$1
    local fbase=$2
    local fwhm=$3

    # smoothing
    if [[ $fwhm -eq 0 ]]; then
        echo " * $fbase: skipping smoothing to create fwhm=0 image"
        scp ${fpath}.nii.gz ${fpath}_fwhm${fwhm}.nii.gz
    else
        echo " * $fbase: Smoothing (${fwhm}mm) functional images"
        3dmerge -1blur_fwhm $fwhm \
                -doall \
                -prefix ${fpath}_fwhm${fwhm}.nii.gz \
                        ${fpath}.nii.gz
    fi

    # extract nuisance regressors
    run_func_extract_regressors ${fpath}_fwhm${fwhm} ${fbase}.${fwhm}

    # bandpass
    echo " * $fbase (fwhm=$fwhm): Applying bandpass filter (low: $BPSS_LO, high: $BPSS_HI)"
    echo " *    while regressing out nuisance signals (motion, wm, whole brain, csf)"
    echo " *    as well as constant, linear, and quadratic trends"
    3dBandpass -prefix ${fpath}_fwhm${fwhm}_bpss_resid.nii.gz \
               -ort    $d/nuisance/${fbase}.${fwhm}.regressor.wm.txt \
               -ort    $d/nuisance/${fbase}.${fwhm}.regressor.wholebrain.txt \
               -ort    $d/nuisance/${fbase}.${fwhm}.regressor.ventricles.txt \
               -ort    $d/nuisance/${fbase}.${fwhm}.regressor.wm.deriv.txt \
               -ort    $d/nuisance/${fbase}.${fwhm}.regressor.wholebrain.deriv.txt \
               -ort    $d/nuisance/${fbase}.${fwhm}.regressor.ventricles.deriv.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion1.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion2.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion3.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion4.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion5.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion6.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion1.deriv.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion2.deriv.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion3.deriv.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion4.deriv.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion5.deriv.txt \
               -ort    $d/nuisance/${fbase}.regressor.motion6.deriv.txt \
               -mask   $STANDARD_MASK \
                       $BPSS_LO $BPSS_HI \
                       ${fpath}_fwhm${fwhm}.nii.gz

}

###############################################
# Run preprocessing steps
###############################################
# we will fork some steps to speed things up
#


if [[ "$RUN_ANAT_INIT" == true ]]; then
    # init
    run_anat_init
fi

# anat registration
run_anat_reg

runs=()
runs_warp=()

n=1
for bold in ${BOLDS[@]}; do
    name="rest$(printf '%02d' $n)"

    (

        if [[ "$RUN_FUNC_INIT" == true ]]; then
            # initialize <input vol> <input base>
            run_func_init $bold $d/$name

            # motion correction <input base> <name>
            run_func_motion $d/${name}_reorient_skip_tc $name

            # func skullstrip (and create mean)
            run_func_skullstrip $d/${name}_reorient_skip_tc_mc $name
        fi

        if [[ "$RUN_REG" == true ]]; then
            # func registration <input base>
            run_func_reg_and_normalize $d/${name}_reorient_skip_tc_mc
        fi

        # func scaling
        run_func_scaling $d/${name}_reorient_skip_tc_mc_brain_atl_affine &
        if [[ "$RUN_WARP_REG" == true ]]; then
            run_func_scaling $d/${name}_reorient_skip_tc_mc_brain_atl_warp &
        fi
        wait

        # func regressor extraction
        #run_func_extract_regressors $d/${name}_reorient_skip_tc_mc_brain_atl_affine_gms $name &
        #if [[ "$RUN_WARP_REG" == true ]]; then
        #    run_func_extract_regressors $d/${name}_reorient_skip_tc_mc_brain_atl_warp_gms ${name}.warp &
        #fi
        #wait


        # we will process multiple smoothing kernels
        for fwhm in $FWHMS; do
            run_fcpreproc $d/${name}_reorient_skip_tc_mc_brain_atl_affine_gms $name $fwhm &
            if [[ "$RUN_WARP_REG" == true ]]; then
                run_fcpreproc $d/${name}_reorient_skip_tc_mc_brain_atl_warp_gms ${name}.warp  $fwhm &
            fi
        done
        wait

        exit

    ) &

    # track final output files...
    # (must do this outside of forked process)
    for fwhm in $FWHMS; do
        run_path="$d/${name}_reorient_skip_tc_mc_brain_atl_affine_gms_fwhm${fwhm}_bpss_resid.nii.gz"
        runs[$fwhm]="${runs[$fwhm]} $run_path"

        if [[ "$RUN_WARP_REG" == true ]]; then
            run_path_warp="$d/${name}_reorient_skip_tc_mc_brain_atl_warp_gms_fwhm${fwhm}_bpss_resid.nii.gz"
            runs_warp[$fwhm]="${runs_warp[$fwhm]} $run_path_warp"
        fi
    done

    # increase rest volume count
    n=$((n+1))
done

# wait for run threads to finish
wait


# create simplified file
for fwhm in $FWHMS; do
    if [[ $BOLDN -gt 1 ]]; then
        # combine runs into a single, concatenated 4d file
        fslmerge -t $d/rest_affine_fwhm${fwhm}.nii.gz ${runs[$fwhm]}
        [[ "$RUN_WARP_REG" == true ]] && fslmerge -t $d/rest_warp_fwhm${fwhm}.nii.gz ${runs_warp[$fwhm]}
    else
        ln -s -T ${runs[$fwhm]} $d/rest_affine_fwhm${fwhm}.nii.gz
        [[ "$RUN_WARP_REG" == true ]] && ln -s -T ${runs_warp[$fwhm]} $d/rest_warp_fwhm${fwhm}.nii.gz
    fi
done


# get outta here
exit

