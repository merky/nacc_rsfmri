#!/bin/bash
# author: mhollen@nmr.mgh.harvard.edu

set -e

# user settings
SKIP=4 # drop first N frames
FWHM=4 # smoothing in mm
BPSS_LO=0.009
BPSS_HI=0.08 
TR=5.0
SLICE_ORDER=odd # odd/up/down
ORIENT=RPI # to match template
PROCESS_DIR=restproc

# not enough args
if [[ $# -lt 3 ]]; then
    echo "usage: $(basename $0) subject_dir anat.nii rest1.nii [rest2.nii...]"
    exit 0;
fi

# inputs
SUBJECT_DIR=$1
ANAT=$2
BOLD=$3

# settings

# script directory
script_dir=$(echo $(cd $(dirname $(readlink -f $0)); pwd) )
templates_dir=$script_dir/templates

# standard space
STANDARD=$templates_dir/MNI152_T1_2mm
STANDARD_BRAIN=$templates_dir/MNI152_T1_2mm_brain
STANDARD_MASK=$templates_dir/MNI152_T1_2mm_brain_mask.nii.gz
STANDARD_MASK_DIL=$templates_dir/MNI152_T1_2mm_brain_mask_dil.nii.gz

# masks for extracting nuisance signals
MASK_VENTRICLES=$templates_dir/avg152T1_ventricles_MNI.nii.gz
MASK_WM=$templates_dir/avg152T1_WM_MNI.nii.gz
MASK_WHOLEBRAIN=$STANDARD_MASK

# config
FLIRT_CONF=$FSL_DIR/etc/flirtsch/sch3Dtrans_3dof
FNIRT_CONF=$FSLDIR/etc/flirtsch/T1_2_MNI152_2mm.cnf

# output dir
d=$SUBJECT_DIR/$PROCESS_DIR

# create output dirs
mkdir -p $d/{reg,nuisance,seg}

# detect TR from file (in msec)
tr=$(mri_info $BOLD |
              grep TR |
              awk '{print $2;exit}' |
              cut -d. -f1)

[[ $tr -gt 0 ]] && TR=$(echo "scale=2;$tr/1000" | bc)

run_anat_init () {
    # copy data
    echo " * Copying anatomical data (reorienting to LAS)..."
    3dresample -orient $ORIENT -inset $ANAT -prefix $d/anat.nii.gz

    # deoblique
    3drefit -deoblique $d/anat.nii.gz

    #skull strip anat
    echo " * Skull stripping anat"
    bet $d/anat $d/anat_brain -R -g -.4 -f .35
}

run_anat_reg () {
    #############################################
    # anatomical registration to standard
    #############################################

    # register anat brain to standard space
    echo " * Linear transform: anat (brain) -> standard"
    flirt -in   $d/anat_brain \
          -out  $d/anat_atl_linear \
          -ref  $STANDARD_BRAIN \
          -cost corratio \
          -dof  12 \
          -searchrx -90 90 \
          -searchry -90 90 \
          -searchrz -90 90 \
          -interp trilinear \
          -omat $d/reg/anat2standard.affine.mat

    # nonlinear warp, use non skull-stripped anat
    echo " * Non-linear warp: anat -> standard"
    fnirt  --ref=$STANDARD \
           --refmask=$STANDARD_MASK \
           --in=$d/anat \
           --iout=$d/anat_atl_warp \
           --aff=$d/reg/anat2standard.affine.mat \
           --cout=$d/reg/anat2standard.warp.coef \
           --interp=spline \
           --config=$FNIRT_CONF

    echo " * Segmenting T1 (brain)"
    fast -o $d/seg/anat_brain_fast $d/anat_brain

    echo " * Creating binarized white matter mask"
    fslmaths $d/seg/anat_brain_fast_pve_2 \
             -thr 0.5 -bin $d/seg/anat_brain_wmseg
}


run_func_init () {
    #############################################
    # copy data, reorient, slice time correction
    #############################################

    # functional inputs
    echo " * Copying functional image to dir"
    scp $BOLD $d/rest.nii.gz

    # deoblique
    3drefit -deoblique $d/rest.nii.gz

    # reorient
    echo " * Reorienting to $ORIENT"
    3dresample -orient $ORIENT -inset $d/rest.nii.gz -prefix $d/rest_reorient.nii.gz

    # remove first N frames
    echo " * Removing first $SKIP frames from functional"
    numvols=`echo "$(fslnvols $d/rest_reorient) - $SKIP" | bc`
    fslroi $d/rest_reorient $d/rest_reorient_skip $SKIP $numvols

    # slice time correction? (need to find scan timing)
    echo " * Performing slice time correction"
    slicetimer -i $d/rest_reorient_skip \
               -o $d/rest_reorient_skip_tc \
               -r $TR \
               --$SLICE_ORDER
}

run_func_motion () {
    #############################################
    # motion correction
    #############################################

    echo " * Motion correction"
    mcflirt -in $d/rest_reorient_skip_tc \
            -out $d/rest_reorient_skip_tc_mc \
            -plots \
            -report


    # plot motion
    echo " * Plotting motion parameters"

    # rotations
    fsl_tsplot -i $d/rest_reorient_skip_tc_mc.par \
               -t 'MCFLIRT estimated rotations (radians)' \
               -u 1 --start=1 --finish=3 \
               -a x,y,z -w 640 -h 144 \
               -o $d/rest_reorient_skip_tc_mc_rot.png

    # translations
    fsl_tsplot -i $d/rest_reorient_skip_tc_mc.par \
               -t 'MCFLIRT estimated translations (mm)' \
               -u 1 --start=4 --finish=6 \
               -a x,y,z -w 640 -h 144 \
               -o $d/rest_reorient_skip_tc_mc_trans.png

    # save motion regressors as separate files 
    for x in $(seq 1 6); do
        cat $d/rest_reorient_skip_tc_mc.par |
        awk '{print $'${x}'}' > $d/nuisance/regressor.motion${x}.txt
    done
}

run_func_reg() {

    #############################################
    # registration/normalization
    #############################################

    echo " * Creating mean functional image"
    # create mean functional image
    fslmaths        $d/rest_reorient_skip_tc_mc \
             -Tmean $d/rest_reorient_skip_tc_mc_mean

    echo " * Skull stripping mean image"
    # skull strip it
    bet      $d/rest_reorient_skip_tc_mc_mean \
             $d/rest_reorient_skip_tc_mc_mean_brain \
             -R -f 0.3 -m

    echo " * Apply skull strip mask to 4d functional"
    # apply skull strip to 4d functional
    fslmaths      $d/rest_reorient_skip_tc_mc \
             -mas $d/rest_reorient_skip_tc_mc_mean_brain_mask \
                  $d/rest_reorient_skip_tc_mc_brain

    echo " * Use 2nd/98th percentiles of 4d image to improve brain mask"

    # determine threshold
    p2=$(  fslstats $d/rest_reorient_skip_tc_mc_brain -p 2)
    p98=$( fslstats $d/rest_reorient_skip_tc_mc_brain -p 98)
    thr=$( echo "scale=5; $p2 + ($p98 -$p2)/10" | bc)

    # create mask below threshold
    fslmaths       $d/rest_reorient_skip_tc_mc_brain \
             -thr  $thr \
             -Tmin \
             -bin  $d/rest_reorient_skip_tc_mc_brain_percmask \
             -odt  char

    # dilate mask (redue likelihood of removing brain voxels)
    fslmaths       $d/rest_reorient_skip_tc_mc_brain_percmask \
             -dilF $d/rest_reorient_skip_tc_mc_brain_percmask_dil

    echo " * Applying improved brain mask to 4d image"
    # apply dilated mask to 4d image
    fslmaths      $d/rest_reorient_skip_tc_mc \
             -mas $d/rest_reorient_skip_tc_mc_brain_percmask_dil \
                  $d/rest_reorient_skip_tc_mc_brain

    echo " * Initial transform estimate, func (mean brain) -> anat"
    flirt -in   $d/rest_reorient_skip_tc_mc_mean_brain \
          -ref  $d/anat_brain \
          -out  $d/reg/func2anat.init \
          -omat $d/reg/func2anat.init.mat \
          -dof  6

    echo " * Boundary based registration, func (brain) -> anat"
    flirt -in       $d/rest_reorient_skip_tc_mc_brain \
          -ref      $d/anat_brain \
          -out      $d/reg/func2anat \
          -omat     $d/reg/func2anat.mat \
          -wmseg    $d/seg/anat_brain_wmseg \
          -cost     bbr \
          -init     $d/reg/func2anat.init.mat \
          -dof      6 \
          -schedule ${FSLDIR}/etc/flirtsch/bbr.sch


    echo " * Warping, func (mean mask) -> standard"
    applywarp   --ref=$STANDARD \
                 --in=$d/rest_reorient_skip_tc_mc_mean_brain_mask \
                --out=$d/rest_reorient_skip_tc_mc_mean_brain_mask_atl \
             --premat=$d/reg/func2anat.mat \
               --warp=$d/reg/anat2standard.warp.coef \
             --interp=nn \
               --mask=$STANDARD_MASK_DIL

    echo " * Warping, func (4d) -> standard"
    applywarp   --ref=$STANDARD \
                 --in=$d/rest_reorient_skip_tc_mc_brain \
                --out=$d/rest_reorient_skip_tc_mc_brain_atl_warp \
             --premat=$d/reg/func2anat.mat \
               --warp=$d/reg/anat2standard.warp.coef \
             --interp=spline \
               --mask=$d/rest_reorient_skip_tc_mc_mean_brain_mask_atl

    echo " * Warping, func (mean) -> standard, for qc"
    applywarp   --ref=$STANDARD \
                 --in=$d/rest_reorient_skip_tc_mc_mean_brain \
                --out=$d/rest_reorient_skip_tc_mc_mean_brain_atl_warp \
             --premat=$d/reg/func2anat.mat \
               --warp=$d/reg/anat2standard.warp.coef \
             --interp=spline \
               --mask=$d/rest_reorient_skip_tc_mc_mean_brain_mask_atl

    echo " * Concatenating and inversing xfm matrices"
    # concatenate func -> anat -> standard linear transforms
    convert_xfm -omat   $d/reg/func2standard.mat \
                -concat $d/reg/anat2standard.affine.mat \
                        $d/reg/func2anat.mat

    # make inverse matrices
    convert_xfm -omat    $d/reg/standard2func.mat \
                -inverse $d/reg/func2standard.mat
    convert_xfm -omat    $d/reg/anat2func.mat \
                -inverse $d/reg/func2anat.mat
    convert_xfm -omat    $d/reg/standard2anat.affine.mat \
                -inverse $d/reg/anat2standard.affine.mat

    # normalize rest using linear transform
    echo " * Applying linear transforms, func (4d) -> standard"
    flirt -in       $d/rest_reorient_skip_tc_mc_brain \
          -out      $d/rest_reorient_skip_tc_mc_brain_atl_affine \
          -ref      $STANDARD_BRAIN \
          -applyxfm \
          -init     $d/reg/func2standard.mat \
          -interp   trilinear
}

run_fcpreproc () {
    #############################################
    # smoothing, nuisance regression
    #############################################
    space=$1

    # compute the following for BOTH linear and nonlinear by calling:
    #  run_fcpreproc warp
    #  run_fcpreproc affine

    # guassian smooth
    echo " * Smoothing (${FWHM}mm) functional images"
    mri_fwhm --smooth-only \
             --i $d/rest_reorient_skip_tc_mc_brain_atl_${space}.nii.gz \
             --o $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}.nii.gz

    # grand mean scaling
    fslmaths      $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM} \
             -ing 10000 \
                  $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}_gms \
             -odt float

    # extract mean wm time series
    echo " * Extracting mean white-matter time course signal"
    fslmeants -i $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}_gms.nii.gz \
              -m $MASK_WM \
              -o $d/nuisance/regressor.wm.txt

    # extract mean whole brain time series
    echo " * Extracting mean whole-brain time course signal"
    fslmeants -i $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}_gms.nii.gz \
              -m $MASK_WHOLEBRAIN \
              -o $d/nuisance/regressor.wholebrain.txt

    # extract mean ventricle time series
    echo " * Extracting mean ventricles time course signal"
    fslmeants -i $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}_gms.nii.gz \
              -m $MASK_VENTRICLES \
              -o $d/nuisance/regressor.ventricles.txt

    # bandpass
    echo " * Applying bandpass filter (low: $BPSS_LO, high: $BPSS_HI)"
    echo " * while regressing out nuisance signals (motion, wm, whole brain, csf)"
    echo " * as well as constant, linear, and quadratic trends"
    3dBandpass -prefix $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}_bpss_resid.nii.gz \
               -ort    $d/nuisance/regressor.wm.txt \
               -ort    $d/nuisance/regressor.wholebrain.txt \
               -ort    $d/nuisance/regressor.ventricles.txt \
               -ort    $d/nuisance/regressor.motion1.txt \
               -ort    $d/nuisance/regressor.motion2.txt \
               -ort    $d/nuisance/regressor.motion3.txt \
               -ort    $d/nuisance/regressor.motion4.txt \
               -ort    $d/nuisance/regressor.motion5.txt \
               -ort    $d/nuisance/regressor.motion6.txt \
               -mask   $MASK_WHOLEBRAIN \
                       $BPSS_LO $BPSS_HI \
                       $d/rest_reorient_skip_tc_mc_brain_atl_${space}_fwhm${FWHM}_gms.nii.gz

}

###############################################
# Run preprocessing steps
###############################################
# we will fork some steps to speed things up
#

# init
run_anat_init &
run_func_init &
wait

# anat registration
run_anat_reg &

# motion correction
run_func_motion &
wait

# func registration
run_func_reg

# smoothing, bandpass, etc.
run_fcpreproc warp &
run_fcpreproc affine &
wait

